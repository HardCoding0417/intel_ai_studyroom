# -*- coding: utf-8 -*-
"""ex4_iris_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JYpLS2GzaPrwZcO1PukRQQyAPcGPq3Xs
"""

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder

iris = load_iris()
print(type(iris))
print('========== data shape ==========')
print('Data', iris.data.shape)
print('Label', iris.target.shape)
# scale not needed; < 5
print('First five data:', iris.data[:5])
print('First five labels:', iris.target[:5])
print('Iris dataset keys:', iris.keys())

print(iris.feature_names)
print(iris.target_names)

import pandas as pd # to handle data in form of table

iris_dataframe = pd.DataFrame(iris.data, columns=iris.feature_names)
pd.plotting.scatter_matrix(iris_dataframe, c=iris.target,
                           figsize=(7, 7),
                           marker='o',
                           hist_kwds={'bins': 20},
                           s=60, alpha=0.8)
plt.show()

x = iris.data
y = iris.target.reshape(-1, 1)
print(y[45:55])

# only one 1 in all: OneHotCode
encoder = OneHotEncoder(sparse_output=False)
encoded_y = encoder.fit_transform(y)
print(encoded_y.shape)
print(encoded_y[45:55])

X_train, X_test, Y_train, Y_test = train_test_split(x, encoded_y, test_size=0.2)
print(X_train.shape, Y_train.shape)
print(X_test.shape, Y_test.shape)

model = Sequential()
model.add(Dense(256, input_dim=4, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(512, activation='relu'))
model.add(Dense(3, activation='softmax'))

model.summary()

opt = Adam(learning_rate=0.001)
model.compile(opt, loss='categorical_crossentropy', metrics=['accuracy'])

fit_hist = model.fit(X_train, Y_train, batch_size=5, epochs=50, verbose=1)

plt.plot(fit_hist.history['accuracy'])
plt.show()

score = model.evaluate(X_test, Y_test, verbose=0)
print(score[1])

labels = iris.target_names
sample_idx = np.random.randint(30)
sample = X_test[sample_idx]
print(sample)
sample = sample.reshape(1, 4)
print(sample)

predict = model.predict(sample)
print(predict)
print(Y_test[sample_idx])
print(labels[np.argmax(predict)])
print(labels[np.argmax(Y_test[sample_idx])])
