# -*- coding: utf-8 -*-
"""ex15_predict_daily_stock_price.ipynb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oXXjEFlKbipm49g-xDhymQ9-vU0DdOcW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.callbacks import EarlyStopping

raw_data = pd.read_csv('./datasets/Samsung Electronics 2023-10-09.csv')
print(raw_data.head())
raw_data.info()

raw_data['Date'] = pd.to_datetime(raw_data['Date'])
raw_data.set_index('Date', inplace=True)
print(raw_data.head())
raw_data.info()

data = raw_data['2020-10-09':'2023-10-09']
print(data.tail())
data.info()
print(data.shape)

scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)
print(scaled_data[:5])
print(scaled_data.shape)

seq_history = []
seq_predict = []
for i in range(len(scaled_data) - 30):
  history = scaled_data[i:i + 30]
  predict = scaled_data[i + 30][3]
  seq_history.append(history)
  seq_predict.append(predict)
seq_history = np.array(seq_history)
seq_predict = np.array(seq_predict)
print(seq_history.shape)
print(seq_predict.shape)

train_history, test_history, train_predict, test_predict = train_test_split(
    seq_history, seq_predict, test_size=0.2, random_state=77)
print(train_history.shape, train_predict.shape)
print(test_history.shape, test_predict.shape)

model = Sequential([
    GRU(50, input_shape=(train_history.shape[1], train_history.shape[2]),
        return_sequences=True, activation='tanh'),
    Flatten(),
    Dense(1)
])
model.compile(optimizer='adam', loss='mean_squared_error')
model.summary()

fit_hist = model.fit(train_history, train_predict, epochs=80,
                     validation_data=(test_history, test_predict), shuffle=False)

plt.plot(fit_hist.history['loss'][-20:])
plt.plot(fit_hist.history['val_loss'][-20:])
plt.show()

predict = model.predict(test_history)
plt.plot(test_predict, label='actual')
plt.plot(predict, label='predict')
plt.legend()
plt.show()

last_30_data = scaled_data[-30:].reshape(1, 30, 6)
today_close = model.predict(last_30_data)
print(scaler.inverse_transform(np.array([today_close[0][0], 0, 0, 0, 0, 0]).reshape(1, 6))[0][0])
