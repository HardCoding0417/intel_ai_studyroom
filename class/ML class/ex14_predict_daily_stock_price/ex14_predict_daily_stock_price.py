# -*- coding: utf-8 -*-
"""ex14_predict_daily_stock_price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k0Azu9B3jDigb34ZVhlCy89hKqc_9YF8
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import *
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.callbacks import EarlyStopping

raw_data = pd.read_csv('./datasets/Samsung Electronics 2023-10-09.csv')
print(raw_data.head())
raw_data.info()

raw_data['Date'] = pd.to_datetime(raw_data['Date'])
raw_data.set_index('Date', inplace=True)
print(raw_data.head())
raw_data.info()

raw_data['Close'].plot()
plt.show()

test_data = raw_data.sort_values('Close')
print(test_data.head(30))
print(test_data.tail(30))

data_close = raw_data[['Close']]
print(data_close.head())

scaler = MinMaxScaler()
scaled_data_close = scaler.fit_transform(data_close)
print(scaled_data_close)
print(scaled_data_close.shape)

seq_X = []
seq_Y = []
for i in range(len(scaled_data_close) - 30):
  x = scaled_data_close[i:i + 30]
  y = scaled_data_close[i + 30]
  seq_X.append(x)
  seq_Y.append(y)
print(seq_X[0])
print(seq_Y[0])

seq_X = np.array(seq_X)
seq_Y = np.array(seq_Y)
print(seq_X.shape)
print(seq_Y.shape)

training_history, test_history, training_predict, test_predict = train_test_split(
    seq_X, seq_Y, test_size=0.2)
print(training_history.shape, training_predict.shape)
print(test_history.shape, test_predict.shape)

# model = Sequential([
#     LSTM(50, input_shape=(30, 1), activation='tanh'),
#     Flatten(),
#     Dense(1)
# ])
# model.compile(optimizer='adam', loss='mean_squared_error')
# model.summary()
#
# fit_hist = model.fit(training_history, training_predict, epochs=100,
#                      validation_data=(test_history, test_predict), shuffle=False)
#
# plt.plot(fit_hist.history['loss'][1:], label='loss')
# plt.plot(fit_hist.history['val_loss'][1:], label='validation loss')
# plt.legend()
# plt.show()
#
# model.save('./stock_price_predict_model.h5')

model = load_model('stock_price_predict_model.h5')

# pred = model.predict(test_history)
#
# plt.plot(pred[:30], label='prediction')
# plt.plot(test_predict[:30], label='actual')
# plt.legend()
# plt.show()

last_data_30 = scaled_data_close[-30:].reshape(1, 30, 1)
today_close = model.predict(last_data_30)
print(today_close)

today_close_won = scaler.inverse_transform(today_close)
print(today_close_won)

days = 7
scaled_data_30 = scaled_data_close[-30:]
scaled_data_close_with_future = scaled_data_close.copy()
for i in range(days):
  predict = model.predict(scaled_data_30.reshape(1, 30, 1))[0]
  scaled_data_30 = np.append(scaled_data_30[1:], predict)
  scaled_data_close_with_future = np.append(scaled_data_close_with_future, predict)
print(scaler.inverse_transform(scaled_data_30[-1].reshape(-1, 1)))

plt.subplot(0)
plt.plot(scaled_data_close)
plt.subplot(1)
plt.plot(scaled_data_close_with_future)
plt.show()
