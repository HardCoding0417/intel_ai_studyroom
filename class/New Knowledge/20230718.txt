271, 273, 274, 276, 284, 285, 296, 300


method overriding, operator overloading (O)
method overloading? (X)

class method에 parameter로 'self' 넣으라고!!!
파일을 'open()'으로 열면 좀 닫아라!!!

method 안에서 method 쓸 때 'self.' 안 쓰면 어떻게 되는지 알지?
class의 method를 호출하는 방법에는 2가지가 있음
class definition에서 __init__() 밖에 있는 fields는 모두 일단 class variables
python에서 overloading은 special methods와 관련된 operator overloading밖에 해당하지 않음
self, other, cls(os.system()/@classmethod)
__radd__



컴퓨터의 '작업 관리자' -> '성능'에서 코어, 논리 프로세서의 개수를 찾아보자.
'msinfo32' -> '프로세서'


<terminology>

1) thread: 하나의 program이 동작하면 하나의 process가 동작하고 그 안에 돌아가는 여러 개의 소규모 기능
	ex) LoL - Attack, BGM, Gold calc., .. -> multi-threading
2) multi-tasking: 최대 한 개의 process를 시간 분할해서 처리 (자원 공유함)
3) multi-processing: 여러 개의 processes가 동시에 독립적으로 처리


<multi-processing>
	running several CPUs.
	
1) define process 	as function													mp_def.py
2) ... 				as class													mp_class.py
3) run processes																mp_start.py
4) data transfer between processes - 	Queue									mp_queue.py
5) ... - 								SimpleQueue								mp_simpleQueue.py
6) ... - 								JoinableQueue							mp_joinableQueue.py
7) share variables between processes											mp_value.py
8) share data between processes - 	Manager, Pipe								mp_manager.py, mp_pipe.py
9) stable shared data access between processes - 				Lock			mp_lock.py
10) process synchronization(processes run at the same time) - 	Event			mp_event.py
11) ... - 														Condition		mp_condition.py
12) ... - 														Semaphore		mp_semaphore.py
13) ... - 														Barrier			mp_barrier.py
14) share data between processes - 	Pool										mp_pool_map.py, mp_pool_apply.py


나중에 실전에서는 추가 CPU를 달거나 GPU를 이용하거나 하게 될 것임